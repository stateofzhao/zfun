//整个项目的插件管理配置，有两个功能：
//1，配置插件依赖库仓库，类似之前的 buildscript{repositories{...}}。
//2，统一声明整个项目需要的插件（当然你也可以按照以前的方式在给子 module 中声明）。
//【注意：只有明确的发布 xxx.gradle.plugin 插件文件到这些仓库中时，
// 才可以直接通过 plugins{...}访问到，如果不是通过上述方式发布的插件，必须通过 resolutionStrategy{...}来"转译"下】
pluginManagement{
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        mavenLocal()
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
        maven {
            url "https://jitpack.io"
        }

        /*maven {
            url rootProject.getProjectDir().getParent()+'/offlineDepdencies/maven/'
        }*/
    }

    //与之前的 buildscript{dependencies{...}} 功能相同，
    // 此功能在 plugins{} 配置前执行，所以在此处不会拿到下面 plugins{} 块中配置的version值（requested.version==null），
    // 只有在调用地方给定version才能拿到，例如：在 build.gradle 文件明确指定version：
    // plugins {
    //    id 'io.github.stateofzhao.module' version '1.3.0-SNAPSHOT' apply true
    // }
    // ...
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == 'io.github.stateofzhao.module') {
                println("io.github.stateofzhao.module 插件版本："+requested.version)
                useModule("io.github.stateofzhao:GradleModulePlugin:$io_github_stateofzhao_module_v")
                //如果这里写死版本号，则外部plugins{id 'io.github.stateofzhao.module'}即可，无需传递版本号
                /*useModule("io.github.stateofzhao:GradleModulePlugin:1.3.0-SNAPSHOT")*/
            } else if(requested.id.id == 'zfun.module.inject'){
                println("zfun.module.inject 插件版本："+requested.version)
                useModule('io.github.stateofzhao:InjectPlugin:0.0.1-SNAPSHOT')
            } else if(requested.id.id == 'kotlin-android'){
                useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
            }
        }
    }

    //下面这个可以省略，放到这里只是为了方便看到项目中总共应用了多少插件
    plugins{
        id 'com.android.application' version '7.0.0' apply false
        id 'com.android.library' version com_android_library_version apply false
        id 'io.github.stateofzhao.module' version io_github_stateofzhao_module_v apply false
        id 'kotlin-android' version kotlin_version apply false
        id 'org.jetbrains.kotlin.jvm' version kotlin_version apply false
        id 'org.jetbrains.kotlin.android' version kotlin_version apply false
        id 'org.jetbrains.kotlin.kapt' version "1.4.20" apply false
        id 'zfun.module.inject' version '0.0.1-SNAPSHOT' apply false
    }
}

//项目开发依赖库配置，同样有两个功能：
//1，配置依赖库仓库，类似之前的 allprojects{repositories{...}}。
//2，统一声明整个项目的依赖项，但是不推荐在这里做，因为有的子 module 不需要其中的某些依赖，还是放到各自的子module来声明依赖比较好。
dependencyResolutionManagement{
//    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories{
        google()
        mavenCentral()
        jcenter()

        /*maven{
            url rootProject.getProjectDir().getParent()+'/offlineDepdencies/maven'
        }*/

        //本地aar依赖
        flatDir {
            dirs 'sharelib/libs'
            dirs 'injectPlugin/libs'
        }
    }
}

include ':apk', ':zfunlib', ':observerUninstall', ':learn',  'sample'
include ':audio'
include ':sharelib'
include ':xposedmodule'
include ':component-structure:component-1:bridge'
include ':component-structure:component-1:module1'
include ':component-structure:component-1:module2'
include ':component-structure:component-1:module3'
include ':component-structure:component-1:app'
include ':component-structure:component-1:base'
include ':component-structure:initProcessor'
include ':component-structure:annotation'
include ':injectPlugin'
include ':gradleFun'

//让 flutter托管后，dependencyResolutionManagement{repositories{flatDir{}}}不起作用了，需要在 rootProject.build.gradle中再设置下
//flutter
setBinding(new Binding([gradle: this]))
evaluate(new File(
        settingsDir,
        'myflutter/.android/include_flutter.groovy'
))

include ':myflutter'
